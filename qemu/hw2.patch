diff --git a/block/Kconfig.iosched b/block/Kconfig.iosched
index 421bef9..a376ebb 100644
--- a/block/Kconfig.iosched
+++ b/block/Kconfig.iosched
@@ -2,6 +2,14 @@ if BLOCK
 
 menu "IO Schedulers"
 
+config IOSCHED_LOOK
+	tristate "LOOK I/O scheduler"
+	default y
+	---help---
+	LOOK I/O scheduler does big boy work. Uses insertion sort when inserting
+	a request into the queue. Therefore, it can maintain a sorted queue at
+	all times depending on the position relative to the current node.
+
 config IOSCHED_NOOP
 	bool
 	default y
@@ -55,6 +63,9 @@ choice
 	config DEFAULT_NOOP
 		bool "No-op"
 
+	config DEFAULT_LOOK
+		bool "Look"
+
 endchoice
 
 config DEFAULT_IOSCHED
@@ -62,6 +73,7 @@ config DEFAULT_IOSCHED
 	default "deadline" if DEFAULT_DEADLINE
 	default "cfq" if DEFAULT_CFQ
 	default "noop" if DEFAULT_NOOP
+	default "look" if DEFAULT_LOOK
 
 endmenu
 
diff --git a/block/look-iosched.c b/block/look-iosched.c
index e69de29..554be53 100644
--- a/block/look-iosched.c
+++ b/block/look-iosched.c
@@ -0,0 +1,148 @@
+/*
+ * elevator look
+ */
+#include <linux/blkdev.h>
+#include <linux/elevator.h>
+#include <linux/bio.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+
+struct look_data {
+	struct list_head queue;
+};
+
+static void look_merged_requests(struct request_queue *q, struct request *rq,
+				 struct request *next)
+{
+	list_del_init(&next->queuelist);
+}
+
+static int look_dispatch(struct request_queue *q, int force)
+{
+	struct look_data *nd = q->elevator->elevator_data;
+
+	if (!list_empty(&nd->queue)) {
+		struct request *rq;
+		rq = list_entry(nd->queue.next, struct request, queuelist);
+		printk(KERN_DEBUG "LOOK-IO dispatching @ %llu\n", blk_rq_pos(rq));
+		
+		list_del_init(&rq->queuelist);
+		//changed to 'add_tail' for insertion sort
+		elv_dispatch_add_tail(q, rq);
+		return 1;
+	}
+	return 0;
+}
+
+static void look_add_request(struct request_queue *q, struct request *rq)
+{
+	struct look_data *nd = q->elevator->elevator_data;
+	struct list_head *current;
+	struct list_head *tmp;
+	struct request *current_node;
+	
+	
+	//used insertion sort when adding a requenst to the queue	
+	if(list_empty(&nd->queue)) {
+		list_add(&rq->queuelist, &nd->queue);
+	}
+	
+	else {
+		list_for_each_safe(current, tmp, &np->queue){
+			current_node = list_entry(current, struct request, queuelist);
+		
+			if(blk_rq_pos(current) < blk_rq_pos(rq)){
+				list_add(&rq->queuelist, &current->queuelist);
+				break;
+			}
+
+		}
+	}
+
+
+}
+
+static struct request *
+look_former_request(struct request_queue *q, struct request *rq)
+{
+	struct look_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.prev == &nd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.prev, struct request, queuelist);
+}
+
+static struct request *
+look_latter_request(struct request_queue *q, struct request *rq)
+{
+	struct look_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.next == &nd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.next, struct request, queuelist);
+}
+
+static int look_init_queue(struct request_queue *q, struct elevator_type *e)
+{
+	struct look_data *nd;
+	struct elevator_queue *eq;
+
+	eq = elevator_alloc(q, e);
+	if (!eq)
+		return -ENOMEM;
+
+	nd = kmalloc_node(sizeof(*nd), GFP_KERNEL, q->node);
+	if (!nd) {
+		kobject_put(&eq->kobj);
+		return -ENOMEM;
+	}
+	eq->elevator_data = nd;
+
+	INIT_LIST_HEAD(&nd->queue);
+
+	spin_lock_irq(q->queue_lock);
+	q->elevator = eq;
+	spin_unlock_irq(q->queue_lock);
+	return 0;
+}
+
+static void look_exit_queue(struct elevator_queue *e)
+{
+	struct look_data *nd = e->elevator_data;
+
+	BUG_ON(!list_empty(&nd->queue));
+	kfree(nd);
+}
+
+static struct elevator_type elevator_look = {
+	.ops = {
+		.elevator_merge_req_fn		= look_merged_requests,
+		.elevator_dispatch_fn		= look_dispatch,
+		.elevator_add_req_fn		= look_add_request,
+		.elevator_former_req_fn		= look_former_request,
+		.elevator_latter_req_fn		= look_latter_request,
+		.elevator_init_fn		= look_init_queue,
+		.elevator_exit_fn		= look_exit_queue,
+	},
+	.elevator_name = "look",
+	.elevator_owner = THIS_MODULE,
+};
+
+static int __init look_init(void)
+{
+	return elv_register(&elevator_look);
+}
+
+static void __exit look_exit(void)
+{
+	elv_unregister(&elevator_look);
+}
+
+module_init(look_init);
+module_exit(look_exit);
+
+
+MODULE_AUTHOR("1337 code gang XXX420XXX");
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Lo-ok IO scheduler");
